# Week 0: Introduction to Chip Modeling, Tool Setup & VLSI SoC Design Flow  

This week lays the foundation for **Digital VLSI System-on-Chip (SoC) design**, covering the complete workflow from high-level application modeling to silicon implementation.  
Participants will set up the required tools, verify their environment, and gain a strong understanding of the end-to-end design process.  
The goal is to ensure a **validated and reproducible setup** for all future design stages.  

---

## Chip Modeling and Digital VLSI SoC Design Workflow  

### 1. C-Based Modeling (O1)  
- Model the application in **C** using GCC with `-O0` optimization.  
- Generate and compare outputs with `-O1` optimization for target processors (RISC, ARM).  
- **Goal:** Match `O0` and `O1` outputs → freeze as **specification baseline**.  

---

### 2. RTL Architecture (O2)  
- Translate the validated specification into **RTL (Verilog)**.  
- Develop a **gate-level representation** of the architecture.  
- Simulate the application on RTL.  
- **Goal:** Verify O2 RTL outputs match O1 C model outputs.  

---

### 3. RTL Processing & IP Integration (O3)  
- Partition RTL into **processor** and **peripheral IPs**:  
  - **Processor:** Synthesizable, gate-level CPU.  
  - **Peripheral IPs:**  
    - Digital macros (synth RTL).  
    - Analog functional RTL (e.g., ADCs, PLLs).  
- Integrate all blocks into a unified **SoC** (with GPIOs, etc.).  
- **Goal:** Confirm identical outputs across O1, O2, and O3 levels.  

---

### 4. Physical Design & Tapeout (O4)  
- Perform **physical design**: floorplanning, placement, clock tree synthesis (CTS), and routing.  
- Generate and verify **GDSII** (DRC/LVS checks).  
- Upon validation, proceed with **tapeout**, fabrication, packaging, and testing.  
- Run the same application on silicon to confirm specification compliance.  
- **Target:** Processor frequency = **100–130 MHz**.  

---

## ✅ Key Takeaway  
This structured workflow (O1 → O4), combined with robust **toolchain setup** and **environment verification**, guarantees the **functional correctness, design integrity, and reproducibility** of both the application and hardware design, as referenced in *Getting Started with Digital VLSI SoC Design and Planning*.  


⚙️ System and Virtual Machine Configuration
To ensure optimal performance, the Virtual Machine (VM) was configured with:
Specification	      Details
Operating System	  Ubuntu 20.04+
RAM	                  6 GB
Storage	              50 GB HDD
vCPUs	              4
💡 Pro Tip: This setup ensures smooth toolchain performance and simulation execution.
________________________________________
🛠️ Tool Installation & Verification
The following open-source tools were installed:
•	Yosys → RTL synthesis
•	Icarus Verilog (iverilog) → Verilog simulation
•	GTKWave → Waveform viewer
•	Ngspice → Circuit simulation
•	Magic VLSI → Layout editor
•	OpenLane → End-to-end digital ASIC flow
________________________________________

🔹 Yosys (RTL Synthesis)
sudo apt-get update
git clone https://github.com/YosysHQ/yosys.git
cd yosys
sudo apt install make build-essential clang bison flex \
 libreadline-dev gawk tcl-dev libffi-dev git \
 graphviz xdot pkg-config python3 libboost-system-dev \
 libboost-python-dev libboost-filesystem-dev zlib1g-dev
make config-gcc
make
sudo make install

✅ Verify:
yosys -V
________________________________________

🔹 Icarus Verilog (Simulation)
sudo apt-get update
sudo apt-get install iverilog

✅ Verify:
iverilog -V
________________________________________

🔹 GTKWave (Waveform Viewer)
sudo apt-get update
sudo apt install gtkwave

✅ Verify:
gtkwave --version
________________________________________

🔹 Ngspice (Circuit Simulator)
# Download tarball from https://sourceforge.net/projects/ngspice/files/
tar -zxvf ngspice-37.tar.gz
cd ngspice-37
mkdir release
cd release
../configure --with-x --with-readline=yes --disable-debug
make
sudo make install

✅ Verify:
ngspice -v
________________________________________

🔹 Magic VLSI (Layout Tool)
sudo apt-get install m4 tcsh csh libx11-dev tcl-dev tk-dev \
libcairo2-dev mesa-common-dev libglu1-mesa-dev libncurses-dev

git clone https://github.com/RTimothyEdwards/magic
cd magic
./configure
make
sudo make install

✅ Verify:
magic -v
________________________________________

🔹 OpenLane (Digital ASIC Flow)
sudo apt-get update
sudo apt-get upgrade
sudo apt install -y build-essential python3 python3-venv python3-pip make git 
sudo apt install apt-transport-https ca-certificates curl software-properties-common

# Install Docker
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o \
/usr/share/keyrings/docker-archive-keyring.gpg

echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] \
https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \
sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt update
sudo apt install docker-ce docker-ce-cli containerd.io
sudo docker run hello-world

# Add user to Docker group
sudo groupadd docker
sudo usermod -aG docker $USER
sudo reboot

# After reboot
docker run hello-world

# Clone and build OpenLane
cd $HOME
git clone https://github.com/The-OpenROAD-Project/OpenLane
cd OpenLane
make
make test

✅ Verify dependencies:
git --version
docker --version
python3 --version
python3 -m pip --version
make --version
python3 -m venv -h
________________________________________
✅ Verification Summary
Tool	          Command	            Expected Result
Yosys  	          yosys -V	            Version info
Icarus Verilog	  iverilog -V	        Version info
GTKWave	          gtkwave --version	    Version info
Ngspice	          ngspice -v	        Version info
Magic	          magic -v	            Version info
OpenLane	      make test	            Runs test cases
________________________________________

📌 Notes
•	Ensure 6 GB+ RAM is allocated to the VM for heavy toolchains like OpenLane.
•	Some tools (Ngspice, Magic) may need extra dependencies if missing.
•	Always run sudo apt update && sudo apt upgrade before installation.
________________________________________
🔥 With this setup, your environment is ready for end-to-end RTL to GDSII digital flow and analog simulations.


